{"version":3,"file":"src/main.js","names":["constants","SIGRTMAX","getSignals","getSignalsByName","signals","Object","fromEntries","map","getSignalByName","name","number","description","supported","action","forced","standard","signalsByName","getSignalsByNumber","length","signalsA","Array","from","value","getSignalByNumber","assign","signal","findSignalByNumber","undefined","find","signalA","signalsByNumber"],"sources":["../../src/main.js"],"sourcesContent":["import { constants } from 'os'\n\nimport { SIGRTMAX } from './realtime.js'\nimport { getSignals } from './signals.js'\n\n// Retrieve `signalsByName`, an object mapping signal name to signal properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByName = function () {\n  const signals = getSignals()\n  return Object.fromEntries(signals.map(getSignalByName))\n}\n\nconst getSignalByName = function ({\n  name,\n  number,\n  description,\n  supported,\n  action,\n  forced,\n  standard,\n}) {\n  return [\n    name,\n    { name, number, description, supported, action, forced, standard },\n  ]\n}\n\nexport const signalsByName = getSignalsByName()\n\n// Retrieve `signalsByNumber`, an object mapping signal number to signal\n// properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByNumber = function () {\n  const signals = getSignals()\n  const length = SIGRTMAX + 1\n  const signalsA = Array.from({ length }, (value, number) =>\n    getSignalByNumber(number, signals),\n  )\n  return Object.assign({}, ...signalsA)\n}\n\nconst getSignalByNumber = function (number, signals) {\n  const signal = findSignalByNumber(number, signals)\n\n  if (signal === undefined) {\n    return {}\n  }\n\n  const { name, description, supported, action, forced, standard } = signal\n  return {\n    [number]: {\n      name,\n      number,\n      description,\n      supported,\n      action,\n      forced,\n      standard,\n    },\n  }\n}\n\n// Several signals might end up sharing the same number because of OS-specific\n// numbers, in which case those prevail.\nconst findSignalByNumber = function (number, signals) {\n  const signal = signals.find(({ name }) => constants.signals[name] === number)\n\n  if (signal !== undefined) {\n    return signal\n  }\n\n  return signals.find((signalA) => signalA.number === number)\n}\n\nexport const signalsByNumber = getSignalsByNumber()\n"],"mappings":"AAAA,OAASA,SAAT,KAA0B,IAA1B;;AAEA,OAASC,QAAT,KAAyB,eAAzB;AACA,OAASC,UAAT,KAA2B,cAA3B;;;;AAIA,KAAMC,iBAAgB,CAAG,UAAY;AACnC,KAAMC,QAAO,CAAGF,UAAU,EAA1B;AACA,MAAOG,OAAM,CAACC,WAAP,CAAmBF,OAAO,CAACG,GAAR,CAAYC,eAAZ,CAAnB,CAAP;AACD,CAHD;;AAKA,KAAMA,gBAAe,CAAG,SAAU;AAChCC,IADgC;AAEhCC,MAFgC;AAGhCC,WAHgC;AAIhCC,SAJgC;AAKhCC,MALgC;AAMhCC,MANgC;AAOhCC,QAPgC,CAAV;AAQrB;AACD,MAAO;AACLN,IADK;AAEL,CAAEA,IAAF,CAAQC,MAAR,CAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,MAAxC,CAAgDC,MAAhD,CAAwDC,QAAxD,CAFK,CAAP;;AAID,CAbD;;AAeA,MAAO,MAAMC,cAAa,CAAGb,gBAAgB,EAAtC;;;;;AAKP,KAAMc,mBAAkB,CAAG,UAAY;AACrC,KAAMb,QAAO,CAAGF,UAAU,EAA1B;AACA,KAAMgB,OAAM,CAAGjB,QAAQ,CAAG,CAA1B;AACA,KAAMkB,SAAQ,CAAGC,KAAK,CAACC,IAAN,CAAW,CAAEH,MAAF,CAAX,CAAuB,CAACI,KAAD,CAAQZ,MAAR;AACtCa,iBAAiB,CAACb,MAAD,CAASN,OAAT,CADF,CAAjB;;AAGA,MAAOC,OAAM,CAACmB,MAAP,CAAc,EAAd,CAAkB,GAAGL,QAArB,CAAP;AACD,CAPD;;AASA,KAAMI,kBAAiB,CAAG,SAAUb,MAAV,CAAkBN,OAAlB,CAA2B;AACnD,KAAMqB,OAAM,CAAGC,kBAAkB,CAAChB,MAAD,CAASN,OAAT,CAAjC;;AAEA,GAAIqB,MAAM,GAAKE,SAAf,CAA0B;AACxB,MAAO,EAAP;AACD;;AAED,KAAM,CAAElB,IAAF,CAAQE,WAAR,CAAqBC,SAArB,CAAgCC,MAAhC,CAAwCC,MAAxC,CAAgDC,QAAhD,EAA6DU,MAAnE;AACA,MAAO;AACL,CAACf,MAAD,EAAU;AACRD,IADQ;AAERC,MAFQ;AAGRC,WAHQ;AAIRC,SAJQ;AAKRC,MALQ;AAMRC,MANQ;AAORC,QAPQ,CADL,CAAP;;;AAWD,CAnBD;;;;AAuBA,KAAMW,mBAAkB,CAAG,SAAUhB,MAAV,CAAkBN,OAAlB,CAA2B;AACpD,KAAMqB,OAAM,CAAGrB,OAAO,CAACwB,IAAR,CAAa,CAAC,CAAEnB,IAAF,CAAD,GAAcT,SAAS,CAACI,OAAV,CAAkBK,IAAlB,IAA4BC,MAAvD,CAAf;;AAEA,GAAIe,MAAM,GAAKE,SAAf,CAA0B;AACxB,MAAOF,OAAP;AACD;;AAED,MAAOrB,QAAO,CAACwB,IAAR,CAAa,CAACC,OAAD,GAAaA,OAAO,CAACnB,MAAR,GAAmBA,MAA7C,CAAP;AACD,CARD;;AAUA,MAAO,MAAMoB,gBAAe,CAAGb,kBAAkB,EAA1C"}