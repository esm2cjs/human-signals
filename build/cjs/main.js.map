{
  "version": 3,
  "sources": ["../../src/main.js"],
  "sourcesContent": ["import { constants } from 'os'\n\nimport { SIGRTMAX } from './realtime.js'\nimport { getSignals } from './signals.js'\n\n// Retrieve `signalsByName`, an object mapping signal name to signal properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByName = function () {\n  const signals = getSignals()\n  return Object.fromEntries(signals.map(getSignalByName))\n}\n\nconst getSignalByName = function ({\n  name,\n  number,\n  description,\n  supported,\n  action,\n  forced,\n  standard,\n}) {\n  return [\n    name,\n    { name, number, description, supported, action, forced, standard },\n  ]\n}\n\nexport const signalsByName = getSignalsByName()\n\n// Retrieve `signalsByNumber`, an object mapping signal number to signal\n// properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByNumber = function () {\n  const signals = getSignals()\n  const length = SIGRTMAX + 1\n  const signalsA = Array.from({ length }, (value, number) =>\n    getSignalByNumber(number, signals),\n  )\n  return Object.assign({}, ...signalsA)\n}\n\nconst getSignalByNumber = function (number, signals) {\n  const signal = findSignalByNumber(number, signals)\n\n  if (signal === undefined) {\n    return {}\n  }\n\n  const { name, description, supported, action, forced, standard } = signal\n  return {\n    [number]: {\n      name,\n      number,\n      description,\n      supported,\n      action,\n      forced,\n      standard,\n    },\n  }\n}\n\n// Several signals might end up sharing the same number because of OS-specific\n// numbers, in which case those prevail.\nconst findSignalByNumber = function (number, signals) {\n  const signal = signals.find(({ name }) => constants.signals[name] === number)\n\n  if (signal !== undefined) {\n    return signal\n  }\n\n  return signals.find((signalA) => signalA.number === number)\n}\n\nexport const signalsByNumber = getSignalsByNumber()\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;;;;gBAA0B;AAE1B,sBAAyB;AACzB,qBAA2B;AAI3B,MAAMA,mBAAmB,WAAY;AACnC,QAAMC,cAAUC,2BAAU;AAC1B,SAAOC,OAAOC,YAAYH,QAAQI,IAAIC,eAAZ,CAAnB;AACR;AAED,MAAMA,kBAAkB,SAAU;EAChCC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AAPgC,GAQ/B;AACD,SAAO;IACLN;IACA,EAAEA,MAAMC,QAAQC,aAAaC,WAAWC,QAAQC,QAAQC,SAAxD;EAFK;AAIR;AAEM,MAAMC,gBAAgBd,iBAAgB;AAK7C,MAAMe,qBAAqB,WAAY;AACrC,QAAMd,cAAUC,2BAAU;AAC1B,QAAMc,SAASC,2BAAW;AAC1B,QAAMC,WAAWC,MAAMC,KAAK,EAAEJ,OAAF,GAAY,CAACK,OAAOb,WAC9Cc,kBAAkBd,QAAQP,OAAT,CADF;AAGjB,SAAOE,OAAOoB,OAAO,CAAA,GAAI,GAAGL,QAArB;AACR;AAED,MAAMI,oBAAoB,SAAUd,QAAQP,SAAS;AACnD,QAAMuB,SAASC,mBAAmBjB,QAAQP,OAAT;AAEjC,MAAIuB,WAAWE,QAAW;AACxB,WAAO,CAAA;EACR;AAED,QAAM,EAAEnB,MAAME,aAAaC,WAAWC,QAAQC,QAAQC,SAAhD,IAA6DW;AACnE,SAAO;IACL,CAAChB,SAAS;MACRD;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAPQ;EADL;AAWR;AAID,MAAMY,qBAAqB,SAAUjB,QAAQP,SAAS;AACpD,QAAMuB,SAASvB,QAAQ0B,KAAK,CAAC,EAAEpB,KAAF,MAAaqB,oBAAU3B,QAAQM,UAAUC,MAAvD;AAEf,MAAIgB,WAAWE,QAAW;AACxB,WAAOF;EACR;AAED,SAAOvB,QAAQ0B,KAAK,CAACE,YAAYA,QAAQrB,WAAWA,MAA7C;AACR;AAEM,MAAMsB,kBAAkBf,mBAAkB;",
  "names": ["getSignalsByName", "signals", "getSignals", "Object", "fromEntries", "map", "getSignalByName", "name", "number", "description", "supported", "action", "forced", "standard", "signalsByName", "getSignalsByNumber", "length", "SIGRTMAX", "signalsA", "Array", "from", "value", "getSignalByNumber", "assign", "signal", "findSignalByNumber", "undefined", "find", "constants", "signalA", "signalsByNumber"]
}
